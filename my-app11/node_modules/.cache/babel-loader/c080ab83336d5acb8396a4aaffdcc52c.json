{"ast":null,"code":"// const redux = require(\"react-redux\");\n// import { createStore } from \"redux\";\nimport { createSlice, configureStore, current } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    decrease(state, action) {\n      state.counter = state.counter - action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false,\n  emailIsValid: false,\n  passwordIsValid: false\n};\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      if (current.emailIsValid && current.passwordIsValid) state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n\n    emailIsValid(state) {\n      state.emailIsValid = true;\n    },\n\n    passwordIsValid(state) {\n      state.passwordIsValid = true;\n    }\n\n  }\n}); // const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     console.log(state.counter);\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrease\") {\n//     return {\n//       counter: state.counter - action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// };\n// counterSlice.actions.toggleCounter;\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    Auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","current","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","decrease","toggleCounter","initialAuthState","isAuthenticated","emailIsValid","passwordIsValid","authSlice","login","logout","store","reducer","Auth","counterActions","actions","authActions"],"sources":["C:/Users/Dev/Desktop/React/my-app11/src/store/index.js"],"sourcesContent":["// const redux = require(\"react-redux\");\r\n// import { createStore } from \"redux\";\r\nimport { createSlice, configureStore, current } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    decrease(state, action) {\r\n      state.counter = state.counter - action.payload;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst initialAuthState = {\r\n  isAuthenticated: false,\r\n  emailIsValid: false,\r\n  passwordIsValid: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: \"authentication\",\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      if (current.emailIsValid && current.passwordIsValid)\r\n        state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n    emailIsValid(state) {\r\n      state.emailIsValid = true;\r\n    },\r\n    passwordIsValid(state) {\r\n      state.passwordIsValid = true;\r\n    },\r\n  },\r\n});\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//   if (action.type === \"increment\") {\r\n//     return {\r\n//       counter: state.counter + 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"increase\") {\r\n//     console.log(state.counter);\r\n//     return {\r\n//       counter: state.counter + action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"decrease\") {\r\n//     return {\r\n//       counter: state.counter - action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"decrement\") {\r\n//     return {\r\n//       counter: state.counter - 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       counter: state.counter,\r\n//       showCounter: !state.showCounter,\r\n//     };\r\n//   }\r\n//   return state;\r\n// };\r\n\r\n// counterSlice.actions.toggleCounter;\r\n\r\nconst store = configureStore({\r\n  reducer: { counter: counterSlice.reducer, Auth: authSlice.reducer },\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\nexport default store;\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,OAAtC,QAAqD,kBAArD;AAEA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAA5B;AAEA,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC/BO,IAAI,EAAE,SADyB;EAE/BC,YAAY,EAAEL,mBAFiB;EAG/BM,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAD,EAAQ;MACfA,KAAK,CAACP,OAAN;IACD,CAHO;;IAIRQ,SAAS,CAACD,KAAD,EAAQ;MACfA,KAAK,CAACP,OAAN;IACD,CANO;;IAORS,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;MACtBH,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;IACD,CATO;;IAURC,QAAQ,CAACL,KAAD,EAAQG,MAAR,EAAgB;MACtBH,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;IACD,CAZO;;IAaRE,aAAa,CAACN,KAAD,EAAQ;MACnBA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;IACD;;EAfO;AAHqB,CAAD,CAAhC;AAsBA,MAAMa,gBAAgB,GAAG;EACvBC,eAAe,EAAE,KADM;EAEvBC,YAAY,EAAE,KAFS;EAGvBC,eAAe,EAAE;AAHM,CAAzB;AAMA,MAAMC,SAAS,GAAGtB,WAAW,CAAC;EAC5BO,IAAI,EAAE,gBADsB;EAE5BC,YAAY,EAAEU,gBAFc;EAG5BT,QAAQ,EAAE;IACRc,KAAK,CAACZ,KAAD,EAAQ;MACX,IAAIT,OAAO,CAACkB,YAAR,IAAwBlB,OAAO,CAACmB,eAApC,EACEV,KAAK,CAACQ,eAAN,GAAwB,IAAxB;IACH,CAJO;;IAKRK,MAAM,CAACb,KAAD,EAAQ;MACZA,KAAK,CAACQ,eAAN,GAAwB,KAAxB;IACD,CAPO;;IAQRC,YAAY,CAACT,KAAD,EAAQ;MAClBA,KAAK,CAACS,YAAN,GAAqB,IAArB;IACD,CAVO;;IAWRC,eAAe,CAACV,KAAD,EAAQ;MACrBA,KAAK,CAACU,eAAN,GAAwB,IAAxB;IACD;;EAbO;AAHkB,CAAD,CAA7B,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMI,KAAK,GAAGxB,cAAc,CAAC;EAC3ByB,OAAO,EAAE;IAAEtB,OAAO,EAAEE,YAAY,CAACoB,OAAxB;IAAiCC,IAAI,EAAEL,SAAS,CAACI;EAAjD;AADkB,CAAD,CAA5B;AAIA,OAAO,MAAME,cAAc,GAAGtB,YAAY,CAACuB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAA9B;AACP,eAAeJ,KAAf"},"metadata":{},"sourceType":"module"}